keychain_name = "temporary_keychain"
keychain_password = SecureRandom.base64

platform :ios do

  desc "Push a new release build to the App Store"
  lane :release do
    build
    api_key = app_store_connect_api_key(
      key_id: "#{ENV['APPSTORE_KEY_ID']}",
      issuer_id: "#{ENV['APPSTORE_ISSUER_ID']}",
      key_filepath: "#{ENV['APPSTORE_P8_PATH']}",
      duration: 1200,
      in_house: false,
    )
    upload_to_app_store(api_key: api_key)
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  lane :beta do
    build
    api_key = app_store_connect_api_key(
      key_id: "#{ENV['APPSTORE_KEY_ID']}",
      issuer_id: "#{ENV['APPSTORE_ISSUER_ID']}",
      key_filepath: "#{ENV['APPSTORE_P8_PATH']}",
      duration: 1200,
      in_house: false,
    )
    upload_to_testflight(
      api_key: api_key,
      demo_account_required: false,
      beta_app_review_info: {
        contact_email: "oadugmore@outlook.com",
        contact_first_name: "Owen",
        contact_last_name: "Dugmore",
        contact_phone: "7605059615",
        notes: "Thanks for trying Sync,hue! This build was automatically uploaded by Jenkins. You can review the most recent git commit messages below.\n\n" + changelog_from_git_commits
      },
      uses_non_exempt_encryption: false,
    )
  end

  desc "Create .ipa"
  lane :build do
    update_code_signing_settings(use_automatic_signing: false, path: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj")
    certificates
    update_project_provisioning(
      xcodeproj: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj",
      target_filter: "Unity-iPhone",
      profile: ENV["sigh_com.oadugmore.platformer_appstore_profile-path"],
      code_signing_identity: "Apple Distribution: #{ENV['APPLE_TEAM_NAME']} (#{ENV['APPLE_TEAM_ID']})"
    )
    increment_build_number(
       xcodeproj: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj"
    )
    gym(
      project: "#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj",
      scheme: "Unity-iPhone",
      clean: true,
      skip_profile_detection: true,
      codesigning_identity: "Apple Distribution: #{ENV['APPLE_TEAM_NAME']} (#{ENV['APPLE_TEAM_ID']})",
      export_method: "app-store",
      export_options: {
        method: "app-store",
        provisioningProfiles: {
          ENV["IOS_APP_ID"] => "match AppStore #{ENV['IOS_APP_ID']}"
        }
      }
    )
  end

  desc "Synchronize certificates"
  lane :certificates do
    cleanup_keychain
    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      lock_when_sleeps: true,
      timeout: 3600,
      unlock: true
    )
    match(
      type: "appstore",
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )
  end

  lane :cleanup_keychain do
    if File.exist?(File.expand_path("~/Library/Keychains/#{keychain_name}-db"))
      delete_keychain(name: keychain_name)
    end
  end

  after_all do
    if File.exist?(File.expand_path("~/Library/Keychains/#{keychain_name}-db"))
      delete_keychain(name: keychain_name)
    end
  end

end

platform :android do
  desc "Upload a new Android version to the Google Play Store"
  lane :internal do
    upload_to_play_store(
      track: 'internal',
      release_status: 'completed',
      aab: "#{ENV['ANDROID_BUILD_FILE_PATH']}"
    )
  end
  lane :alpha do
    upload_to_play_store(
      track: 'alpha',
      release_status: 'completed',
      aab: "#{ENV['ANDROID_BUILD_FILE_PATH']}"
    )
  end
  lane :beta do
    upload_to_play_store(
      track: 'beta',
      release_status: 'completed',
      aab: "#{ENV['ANDROID_BUILD_FILE_PATH']}"
    )
  end
end
